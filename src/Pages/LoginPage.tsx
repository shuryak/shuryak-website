import React, { useEffect, useState } from 'react';
import { useHistory } from "react-router-dom";
import { UserLoginDTO } from '../../custom-typings/user';
import '../scss/login.scss';
import sendRequest from '../sendRequest';
import ApiErrors from '../apiErrors';
import Limits from '../limits';
import { UsersMethods } from '../apiMethods';

export const LoginPage: React.FunctionComponent = () => {
  const history = useHistory();
  const [nickname, setNickname] = useState<string>('');
  const [password, setPassword] = useState<string>('');
  const [error, setError] = useState<string>('');

  const loginHandler = () => {
    if(nickname.length < Limits.NicknameMin && password.length < Limits.PasswordMin) {
      setError('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –∏ –ø–∞—Ä–æ–ª—è!');
      return;
    } else if(nickname.length < Limits.NicknameMin) {
      setError('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞!');
      return;
    } else if(password.length < Limits.PasswordMin) {
      setError('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è!');
      return;
    }

    const dto: UserLoginDTO = {
      nickname,
      password
    };

    sendRequest('POST', UsersMethods.Login, dto)
      .then(data => {
        const errorCode: number | undefined = data.data.error_code;

        if(errorCode === undefined) {
          localStorage.setItem("access_token", data.data.access_token);
          localStorage.setItem("access_expires_in", data.data.access_expires_in);
          localStorage.setItem("refresh_token", data.data.refresh_token);
          localStorage.setItem("refresh_expires_in", data.data.refresh_expires_in);
          location.replace('/');
          return;
        }

        let errorMessage: string = '';

        switch (errorCode) {
          case ApiErrors.BadAuth:
            errorMessage = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–Ω–µ–π–º–æ–º –∏–ª–∏ –ø–∞—Ä–æ–ª–µ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!';
            break;
          case ApiErrors.InvalidFieldLength:
            errorMessage = '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –¥–ª–∏–Ω–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—è!';
            break;
          default:
            errorMessage = '–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!';
        }

        setError(errorMessage)
      });
  }

  const handleInputChange = (event) => {
    const target = event.target;
    const name = target.name;

    if(name === 'login') {
      setNickname(target.value);
    } else if(name === 'password') {
      setPassword(target.value);
    }
  }

  if(localStorage.getItem("access_token") === null) {
    return (
      <div className="auth">
        <h1>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</h1>
        <p className="page-text">
          –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å–∏ –Ω—É–∂–Ω–æ –≤–æ–π—Ç–∏ :). –í–æ–æ–±—â–µ, –ø–æ-—Ö–æ—Ä–æ—à–µ–º—É, –Ω–∞–¥–æ –±—É–¥–µ—Ç –∑–∞–ø–∏–ª–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏
          –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–µ–π, –Ω–æ —ç—Ç–æ –ø–æ—Ç–æ–º, —Ö–æ—Ä–æ—à–æ? (. ‚ùõ ·¥ó ‚ùõ.)
        </p>
        <p className="error-message">{error}</p>
        <div className="field-block">
          <label htmlFor="login">–ù–∏–∫–Ω–µ–π–º:</label>
          <input
            id="login"
            name="login"
            type="text"
            className={nickname.length < Limits.NicknameMin? 'auth-input bad-input' : 'auth-input'}
            maxLength={Limits.NicknameMax}
            onChange={handleInputChange}
          />
        </div>
        <div className="field-block">
          <label htmlFor="password">–ü–∞—Ä–æ–ª—å:</label>
          <input
            id="password"
            name="password"
            type="password"
            className={password.length < Limits.PasswordMin? 'auth-input bad-input' : 'auth-input'}
            maxLength={Limits.PasswordMax}
            onChange={handleInputChange}/>
        </div>
        <button className="auth-button" onClick={loginHandler}>–í–æ–π—Ç–∏</button>
      </div>
    )
  } else {
    return (
      <React.Fragment>
        <h1>–¢—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è :D</h1>
        <p className="page-text">
          –Ø –æ—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ —Ç—ã –Ω–µ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∏–Ω–∫–æ–≥–Ω–∏—Ç–æ üïµÔ∏è, –Ω–æ <mark>–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É–∂–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞</mark>, —Ç—ã
          –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π!
          (‚òûÔæü„ÉÆÔæü)‚òû  –ú–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:
        </p>
        <button onClick={() => {history.push('/')}}>–ù–∞ –≥–ª–∞–≤–Ω—É—é! üìÉ</button>
      </React.Fragment>
    )
  }
}
